Mmain	main.c	/^int main(int ac, char **av, char **env)$/
__init_cmd	parser_one.c	/^void	__init_cmd(t_cmd *cmd)$/
__init_lexer_vars	lexer1.c	/^void	__init_lexer_vars(t_lexer *vars, t_token_list/
__init_list	lexer_utils.c	/^void	__init_list(t_token_list *lst)$/
__init_parser_vars	parser_one.c	/^void	__init_parser_vars(size_t *size, t_list **cmd/
add_prefix	parser_one.c	/^char *add_prefix(const char *prefix, const char *f/
append_to_lst	parser_utils.c	/^void	append_to_lst(char ***vector, char *elem, siz/
check_argument_file	parser_one.c	/^bool	check_argument_file(t_token *token, t_cmd *cm/
check_file	parser_one.c	/^bool	check_file(t_token *token, t_cmd *cmd)$/
check_syntax	parser.c	/^bool	check_syntax(t_token *t, t_token_list *lst)$/
close_files	parser_utils.c	/^void	close_files(t_cmd *cmd)$/
close_old_open_new	parser_utils.c	/^int	close_old_open_new(t_cmd *cmd, char *file_name/
create_env	parser.c	/^t_list	*create_env(char **env)$/
display_logo	main.c	/^void display_logo(void)$/
expand	expander.c	/^void	expand(t_variables *v, t_list **str_lst, t_li/
fill_token	lexer_utils.c	/^void	fill_token(t_token *t, char *buffer)$/
get_between_quots	lexer1.c	/^void	get_between_quots(t_token_list *lst, t_lexer /
get_data	lexer_utils.c	/^void	get_data(char *buffer, int i, t_token **t, in/
get_keyword_and_filename	lexer1.c	/^void	get_keyword_and_filename(t_token_list *lst, t/
get_nonquoted	lexer1.c	/^void	get_nonquoted(t_token_list *lst, t_lexer *var/
get_tokens	lexer1.c	/^void	get_tokens(t_token_list *lst, char *text, int/
get_type	lexer_utils.c	/^int	get_type(char c, int p)$/
get_value_of_key	expander.c	/^char	*get_value_of_key(char *key, t_list *env, int/
get_values	expander.c	/^char	*get_values(char *token, t_list **str_lst, t_/
heredoc	parser_utils.c	/^void	heredoc(char *eof, t_list *env)$/
is_key_	lexer_utils.c	/^int	is_key_(int *i)$/
is_keyword	utils.c	/^int	is_keyword(char c)$/
merge	lexer_utils.c	/^bool	merge(char c1, char c2, t_token *t)$/
n_parser	parser.c	/^bool	n_parser(t_token_list *lst, t_list **env, cha/
open_file	parser_utils.c	/^void	open_file(t_cmd *cmd, t_token *t, char *file_/
parser_one	parser_one.c	/^t_list	*parser_one(t_token_list *lst, t_list *env)/
t_variables	expander.c	/^}t_variables;$/
trim_expand_token	parser.c	/^void	trim_expand_token(struct s_pvars *vars, t_lis/
wrape_command	parser_one.c	/^void	wrape_command(t_list **cmd_lst, t_cmd **cmd, /
wrappup_exapnded_token	expander.c	/^char	*wrappup_exapnded_token(t_list *str_lst, int /
